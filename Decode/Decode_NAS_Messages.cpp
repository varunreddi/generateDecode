#include <vector>
#include <cassert>
#include <buffers.hpp>
#include <_5GS/decode.hpp>
#include<logger.hpp>

using namespace _5GS;

class DecodeExample : public Decode
{

    

    void onPduSessionEstablishmentAccept(const PDU_session_establishment_accept &pdu)
    {
       // std::cout << pdu.to_string();
    }

    void onPduSessionEstablishmentReject(const PDU_session_establishment_reject &pdu,const std::vector<uint8_t> &data)
    {
      //  std::cout << pdu.to_string();
    }

};

int decode_nas(std::vector<uint8_t> data){
    int size;
    std::vector<uint8_t> outdata;
    DecodeExample decoder;
    int status =  decoder.identify_ct(data);
    //LOG_INFO("Status : {}",status);
    //std::cout << "Decoded " << size << " bytes." << std::endl;
    return status;

}
logger *logger::instance = 0;
int main()
{   
      /*  logger l;
        spdlog::set_level(spdlog::level::trace);
        l.filelogger = spdlog::basic_logger_mt("Messages", "logs/basic.txt");
        spdlog::set_default_logger(l.filelogger);
        spdlog::set_pattern("[%Y-%m-%d %H:%M:%S.%e] [%n] [%s:%#] [%!] [%^%l%$] %v \t");*/

    logger *logobj = logobj->getInstance();
    logobj->setloggingstyle();


    //spdlog::set_pattern("[%Y-%m-%d %H:%M:%S.%e] [%n] [%s:%#] [%!] [%^%l%$] %v \t");

;/* ****************************************************************************************************************/


//0x2e, 0x03, 0x1f, 0xc2, 0x02, 0x03, 0x01, 0x01, 0x00, 0x03, 0x50, 0x06, 0x01, 0x04, 0x00, 0x02,0x00, 0x55, 0x25, 0x0c, 0x61, 0x62, 0x63, 0x2e,
    //0x64, 0x65, 0x66, 0x40, 0x67, 0x68, 0x69, 0x6
    //notifi cation -- 0x7e, 0x40, 0x65, 0x02
    //0x7e, 0x40, 0x46
    //reg acc  --  0x7e, 0x40, 0x42, 0x01, 0x1a, 0x54, 0x07, 0x21, 0x02, 0x03, 0x04, 0x06, 0x07, 0x08
    //Auth rej -- 0x7e, 0x40, 0x58,0x78,0,0x9,0x2, 0x2,0x00, 0x06,0x03, 0x04,0x08
    //Auth res  -- 0x7e, 0x40, 0x5a, 0x0c 
    /* 0x7e, 0x10, 0x56, 0xe0, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x21, 
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
     0x20, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 
     0x78, 0x00, 0x0d, 0x01, 0x03, 0x05, 0x07, 0x09, 0x0a, 0x0b, 0x0d, 0x0f, 0x11, 0x13, 0x15, 0x017 */
    /*security mode command -- 0x7e, 0x00, 0x5d, 0x02, 0x00, 0x02, 0x80, 0x20, 0xe1, 0x36, 0x01, 0x00*/
    /* Authn request -- 0x7e, 0x00, 0x56, 0x00, 0x02, 0x00, 0x00, 0x21, 0x40, 0xcc, 0x49, 0xf1, 0x6e, 0x2f, 0xde, 0xe1,
0x1b, 0x01, 0x96, 0xae, 0x82, 0x8d, 0x7b, 0xcd, 0x20, 0x10, 0xee, 0x1a, 0xac, 0x19, 0x69, 0x3c,
0x80, 0x00, 0xec, 0x83, 0xc6, 0x09, 0xbb, 0x82, 0x92, 0xa0*/
/*Reg Accpet -->  0x7e, 0x00, 0x42, 0x01, 0x02,0x77, 0x00, 0x0b, 0xf2, 0x02, 0xf8,0x39, 0xca,
                     0xfe, 0x00, 0x00, 0x00, 0x00,0x01,
                0x54,0x07,0x00,0x02,0xf8,0x39,0x00,0x00,0x01,
                0x15, 0x0a, 0x04, 0x01, 0x01, 0x02, 0x03, 0x04, 0x01, 0x11, 0x22, 0x33,
                    0x21,0x02,0x00,0x00,
                    0x5d,0x01,0x49,
                    0x16,0x01,0x2c*/
/*pdu session establishement accept -- 0x2e, 0x0a, 0x00, 0xc2, 0x11, 0x00, 0x09, 0x01, 0x00, 0x06, 0x31, 0x31, 0x01, 0x01, 0xff, 0x09,
0x06, 0x01, 0x03, 0xe8, 0x01, 0x03, 0xe8, 0x29, 0x05, 0x01, 0x3c, 0x3c, 0x00, 0x01, 0x22, 0x04,
0x01, 0x01, 0x02, 0x03, 0x79, 0x00, 0x06, 0x09, 0x20, 0x41, 0x01, 0x01, 0x09, 0x7b, 0x00, 0x1b,
0x80, 0x00, 0x0d, 0x04, 0x08, 0x08, 0x08, 0x08, 0x00, 0x03, 0x10, 0x20, 0x01, 0x48, 0x60, 0x48,
0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88, 0x25, 0x09, 0x08, 0x69, 0x6e,
0x74, 0x65, 0x72, 0x6e, 0x65, 0x74*/
/*
DL NAS Transport with DU session establishment accept :  0x7e, 0x00,0x68 ,0x01 ,
    0x2e, 0x0a, 0x00, 0xc2, 0x11, 0x00, 0x09, 0x01, 0x00, 0x06, 0x31, 0x31, 0x01, 0x01, 0xff, 0x09,
    0x06, 0x01, 0x03, 0xe8, 0x01, 0x03, 0xe8, 0x29, 0x05, 0x01, 0x3c, 0x3c, 0x00,0x01, 0x22, 0x04, 0x01, 0x01, 0x02, 0x03,
    0x25, 0x09, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
     0x79,0x00,0x06,0x09,0x20,0x41,0x01,0x01,0x09,  0x12,0x0a 
*/
/*pdu session establishment accept -- 0x2e, 0x0a, 0x00, 0xc2, 0x11, 0x00, 0x09, 0x01, 0x00, 0x06, 0x31, 0x31, 0x01, 0x01, 0xff, 0x09,
    0x06, 0x01, 0x03, 0xe8, 0x01, 0x03, 0xe8, 0x29, 0x05, 0x01, 0x3c, 0x3c, 0x00,0x01, 0x22, 0x04, 0x01, 0x01, 0x02, 0x03,
    0x25, 0x09, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
     0x79,0x00,0x06,0x09,0x20,0x41,0x01,0x01,0x09
*/
/*
  Authentication reject : 0x7e, 0x00, 0x58, 0x78 , 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05

*/
/*
Authentication result : 0x7e, 0x00, 0x5a , 0x03, 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05, 0x01 

*/
  // Authentication_reject:
    // const std::vector<uint8_t> data = { 
    //  0x7e, 0x00, 0x58, 0x78 , 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05                    };

//Registration Reject:
    /*
    message type -44
    5GMM cause   -03 - Illegal UE
    T3346 value (GPRS timer 2) - IE - 5F
                                length - 01
                                GPRS Timer 2 value - 01  

    T3502_value  (GPRS timer 2) - IE - 16
                                length - 01
                                GPRS Timer 2 value - 01
    rrg :
         
0x7e, 0x00, 0x44, 0x03, 0x5f, 0x01 , 0x01,  0x16, 0x01, 0x01 ,0x78 , 0x00, 0x09 , 0x03,  0x06, 0x00,
 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05,0x69,0x01,0x50,0x40,0x01,0x02,0x03   

    EAP - 0x78 , 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05
    Rejected NSSAI - 0x69,0x01,0x10,0x40,0x00,0x00,0x00                              
    */
   /*Auth reject :       0x7e, 0x00, 0x58, 0x78 , 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05
*/
/*Authentication result : 0x7e, 0x00, 0x5a , 0x03, 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05, 0x01 */
    
    /*Registration reject :: 0x7e, 0x00, 0x44, 0x03, 0x5f, 0x01 , 0x01,  0x16, 0x01, 0x01 ,
        0x78 , 0x00, 0x09 , 0x03, 
      0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05,0x69,0x01,0x50,0x40,0x01,0x02,0x03
*/
/*pdusession-modification-reject :0x2e,0x0a,0x00,0xca,0x1a,  0x37,0x01,0x00,   0x7B,0x0,0x5,0x081,0x1,0x2,0x3,0x4   ,0x1d,0x01,0x00,0x61,0x01,0x00

*/
/*psusession-establishment-reject

0x2e,0x0a,0x00,0xc3,0x1a, 0x37,0x01,0x00, 0xF1 , 

          0x78 , 0x00, 0x09 , 0x03,  0x06, 0x00, 0x05 , 0x07, 0x08, 0x09, 0x08, 0x05,
          0x7B,0x0,0x5,0x081,0x1,0x2,0x3,0x4
            ,0x1d,0x01,0x02,0x61,0x01,0x01*/

     const std::vector<uint8_t> data = {

        0x2e, 0x0a, 0x00, 0xc2, 0x11, 0x00, 0x09, 0x01, 0x00, 0x06, 0x31, 0x31, 0x01, 0x01, 0xff, 0x09,
        0x06, 0x01, 0x03, 0xe8, 0x01, 0x03, 0xe8, 0x29, 0x05, 0x01, 0x3c, 0x3c, 0x00, 0x01, 0x22, 0x04,
        0x01, 0x01, 0x02, 0x03, 0x79, 0x00, 0x06, 0x09, 0x20, 0x41, 0x01, 0x01, 0x09, 0x7b, 0x00, 0x1b,
        0x80, 0x00, 0x0d, 0x04, 0x08, 0x08, 0x08, 0x08, 0x00, 0x03, 0x10, 0x20, 0x01, 0x48, 0x60, 0x48,
        0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88, 0x25, 0x09, 0x08, 0x69, 0x6e,
        0x74, 0x65, 0x72, 0x6e, 0x65, 0x74

            
         };
        

/*

*/
    int  status =  decode_nas(data);
    
    //printing outdata
    //std::cout<<"\nstruct :  ";
  
    return 0;
}
